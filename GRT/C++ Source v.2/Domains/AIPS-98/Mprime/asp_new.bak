:-dynamic fact/2, inv_op1/4, inv_op2/4, dist/1, dist/3, operator_number/1, start_time/2.
%:-index(fact/2,[1]), index(inv_op1/4, [1]), index(inv_op2/4, [1]).

create_all_facts:-
	def(X),
	convert_fact(X,XA), 
	assert(fact( XA, [] )),	
	fail.
create_all_facts.

remove_op_number:-
	retract(operator_number(_)),
	fail.
remove_op_number:-!.

remove_satisfied_operators:-
	retract(satisfied_operators(_)),
	fail.
remove_satisfied_operators:-!.
	
next_operator_number(N1):-
	retract(operator_number(N)),
	!,
	N1 is N + 1,
	assert(operator_number(N1)).

 
create_facts:-
	remove_facts, 
	display_message(['Removing previous facts... ', tty]), 
	remove_op_number,
	assert(operator_number(0)),
	remove_satisfied_operators,
	assert(satisfied_operators([])),
	display_message(['OK', nlt]),

	start_count(3),
	display_message(['Creating facts...', tty]),
	create_all_facts,
	display_message(['OK', nlt]),
	end_count(3), nlt,

	start_count(3), 
	display_message(['Creating inverse operators...', tty]), 
	create_inverse_operators,
	display_message(['OK', nlt]), 
	end_count(3),nlt, 

	goal(G), %goal1(G1), append(G, G1, Goals), 
	start_count(3), 
	display_message(['Adding goals...', tty]), 
	add_initial_goals(G),
	display_message(['OK', nlt]), end_count(3), nlt, 


	findall(XorList, xor(XorList), List_of_Xor_Lists), 
	append_all_lists(List_of_Xor_Lists, [], All_XORs),

	start_count(3), 
	display_message(['Adding goals...', tty]), 
	add_initial_goals(G),
	display_message(['OK', nlt]), end_count(3), nlt, 
	

	start_count(3), 
	display_message(['Finding all distances...',tty]),	
	find_all_distances, 
	display_message(['OK', nlt]), 
	end_count(3), nlt,

	start_count(3),  
	display_message(['Retracting remaining facts and operators...',tty]),	
%	retract_remained_facts,
%	remove_all_inv_ops,
	!,
	display_message(['OK', nlt]),
	end_count(3), nlt.

append_all_lists([], All_XORs, All_XORs):-!.
append_all_lists([XOR_List|List_of_Xor_Lists], L, All_XORs):-
	append(L, XOR_List, L1),
	append_all_lists(List_of_Xor_Lists, L1, All_XORs).






retract_remained_facts:-
	retract(fact(Fact, List)),
	assert(dist(Fact, 30000, List)),
	fail.
retract_remained_facts.

remove_all_inv_ops:-
	retract(inv_op1(_,_,_,_)),
	fail.
remove_all_inv_ops:-
	retract(inv_op2(_,_,_,_)),
	fail.
remove_all_inv_ops.

add_initial_goals( [] ):-!.
add_initial_goals( [G1|Goals] ) :-
	convert_fact(G1, G), 
	retract(fact(G,L)),
	assert(dist(G,0,[])),
	update_satisfied_operators(G,L),
	!,
	add_initial_goals(Goals).
 
update_satisfied_operators(_, []):-!.
update_satisfied_operators(G, [OP|T]):-
	get_inv_op1(OP, Prec, Delete, Add),
	inv_compatible_score(Prec,Delete, [], Keep, All_facts),
	retract(inv_op1(OP, _, _, _)), 
	find_grade(All_facts, 0, Score), 
	remove_all(Delete, Prec, Prec1), 
	append_one(Prec1, Keep, Keep1), 
	Score1 is Score + 1,
	!,
	assertz(inv_op2(OP, Add, Score1, Keep1)),
	update_satisfied_operators(G, T).
update_satisfied_operators(G, [_|T]):-
	update_satisfied_operators(G, T).
	
get_inv_op1(OP, Prec, Del, Add):-
	inv_op1(OP, Prec, Del, Add),
	!.

remove_facts:-
	retract(fact(_, _)),
	fail.
remove_facts:-
	retract(inv_op1(_,_,_,_)),
	fail.
remove_facts:-
	retract(inv_op2(_,_,_,_)),
	fail.
remove_facts:-
	retract(dist(_,_,_)),
	fail.
remove_facts:-
	retract(dist(_)),
	fail.
remove_facts:-!.

inverse_operator(operator(Prec, Delete, Add),   Inv_Prec):-
	remove_all(Delete, Prec, Prec1),
	append(Prec1, Add, Inv_Prec). 

remove_all([], Prec, Prec):-!.
remove_all([H|Delete], Prec, Inv_Prec):-
	removeall(H, Prec, Prec1),
	!,
	remove_all(Delete, Prec1, Inv_Prec).

	
create_inverse_operators:-
	operator(_Name , Prec1, Delete1, Add1), 
	convert_all_facts(Prec1, Prec), 
	convert_all_facts(Delete1, Delete), 
	convert_all_facts(Add1, Add), 
	next_operator_number(Op_No),
%	write(Op_No), nlt,
	inverse_operator(operator(Prec, Delete, Add),Inv_Prec),
	assert(inv_op1(Op_No, Inv_Prec, Add, Delete)),
	update_facts(Op_No, Inv_Prec),
	fail.
create_inverse_operators.

 
update_facts(_, []):-!.
update_facts(Op_No, [H|T]):-
	retract(fact(H,L)),
	assert(fact(H,[Op_No|L])),
	!,
	update_facts(Op_No, T).


find_all_distances:-
	repeat,
	get_first_inv_op2(_OP, Add, Score, Keep),
	apply_add_list(Add, Add, Score, Keep),
	continue_search_distances.

continue_search_distances:-
	more_facts,
	more_adds,
	!,
	fail.
continue_search_distances.

more_facts:-
	fact(_,_),
	!.
more_adds:-
	inv_op2(_,_,_,_), 
	!.

get_first_inv_op2(OP, Add, Score, Keep):-
	retract(inv_op2(OP, Add, Score, Keep)), 
	!.


apply_add_list([], _, _, _):-!.
apply_add_list([H|T], Add, Score, Keep):-
	retract(fact(H,L)),
	!,
	remove(H, Add, Add1),
	append_one(Add1, Keep, New_Keep),
	assert(dist(H, Score, New_Keep)), 
	update_satisfied_operators(H, L),
	apply_add_list(T, Add, Score, Keep).
/*
apply_add_list([H|T], Add, Score, Keep):-
	dist(H, S, _), 
	S>Score,
	retract(dist(H,_, _)),
	write(bingo), nlt,
	remove(H, Add, Add1),
	append_one(Add1, Keep, New_Keep),
	assert(dist(H, Score, New_Keep)), 
	!,
	apply_add_list(T, Add, Score, Keep).
*/
apply_add_list([_H|T], Add, Score, Keep):-
	!,
	apply_add_list(T, Add, Score, Keep).
	
inv_compatible([]):-!.
inv_compatible([H|T]):-
	dist(H,_, _),
	!,
	inv_compatible(T).

inv_compatible_score([], _, Keep, Keep, []):-!.
inv_compatible_score([H|T], Delete, Keep1, Keep,  [ fact( H, Grade, K) | All_facts]):-
	dist(H, Grade, K),!,
	remove_all(Delete, K, K1), 
	append_one(K1, Keep1, Keep2), 
	inv_compatible_score(T, Delete, Keep2, Keep, All_facts).

append_one([], L, L):-!.
append_one([H|T], L2, [H|T3]):-
	\+ member(H, L2),
	!,
	append_one(T, L2, T3).
append_one([_|T], L2, L3):-
	append_one(T, L2, L3).


no_duplicates([]):-!.
no_duplicates([_]):-!.
no_duplicates([H|T]):-
	\+ member(H,T),
	no_duplicates(T).


start_count(X):-
	ticks(Ticks),
%	Ticks=0, 
	remove_all(start_time(_)), 
	assert(start_time(X, Ticks)),
	write('Start counting time...'), nlt.
end_count(X):-
%	retract(start_time(X, T1)),
	start_time(X, T1),
	!,
%	T2 is 0, 
	ticks(T2),
%	T is int((T2-T1)/1000),
	T is T2-T1,
	write('Ellapsed time: '), write(T), write(' msecs'),nlt.



convert_fact(Fact, Fact_atom):-
	Fact=..[Functor | Arguments], 
	cat_all(Functor, Arguments, Fact_atom).

cat_all(Fact_atom, [], Fact_atom):-!.
cat_all(Atom, [A|Arguments], Fact_atom):-
	cat( [Atom, '_'], A1, _), 
	cat( [A1, A], A2, _ ),
	!,
	cat_all( A2, Arguments, Fact_atom  ).


convert_all_facts([], []):-!.
convert_all_facts([F1|Facts1], [F| Facts]):-
	convert_fact(F1, F),
	!,
	convert_all_facts(Facts1, Facts).

nlt:-nl, ttyflush.

count(X, L):-findall(a, X, List), length(List, L).
